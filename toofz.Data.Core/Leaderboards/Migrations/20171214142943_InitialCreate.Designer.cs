// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using toofz.Data;

namespace toofz.Data.Leaderboards.Migrations
{
    [DbContext(typeof(LeaderboardsContext))]
    [Migration("20171214142943_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("toofz.Data.Character", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("CharacterId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("toofz.Data.DailyEntry", b =>
                {
                    b.Property<int>("LeaderboardId");

                    b.Property<int>("Rank");

                    b.Property<int>("Level");

                    b.Property<long?>("ReplayId");

                    b.Property<int>("Score");

                    b.Property<long>("SteamId");

                    b.Property<int>("Zone");

                    b.HasKey("LeaderboardId", "Rank");

                    b.HasIndex("ReplayId");

                    b.HasIndex("SteamId");

                    b.ToTable("DailyEntries");
                });

            modelBuilder.Entity("toofz.Data.DailyLeaderboard", b =>
                {
                    b.Property<int>("LeaderboardId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<bool>("IsProduction");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProductId");

                    b.HasKey("LeaderboardId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Date", "ProductId", "IsProduction")
                        .IsUnique()
                        .HasName("IX_DailyLeaderboards");

                    b.ToTable("DailyLeaderboards");
                });

            modelBuilder.Entity("toofz.Data.Entry", b =>
                {
                    b.Property<int>("LeaderboardId");

                    b.Property<int>("Rank");

                    b.Property<int>("Level");

                    b.Property<long?>("ReplayId");

                    b.Property<int>("Score");

                    b.Property<long>("SteamId");

                    b.Property<int>("Zone");

                    b.HasKey("LeaderboardId", "Rank");

                    b.HasIndex("ReplayId");

                    b.HasIndex("SteamId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("toofz.Data.Leaderboard", b =>
                {
                    b.Property<int>("LeaderboardId");

                    b.Property<int>("CharacterId");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<bool>("IsCoOp");

                    b.Property<bool>("IsCustomMusic");

                    b.Property<bool>("IsProduction");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<int>("ModeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProductId");

                    b.Property<int>("RunId");

                    b.HasKey("LeaderboardId");

                    b.HasIndex("ModeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RunId");

                    b.HasIndex("CharacterId", "RunId", "ModeId", "ProductId", "IsProduction", "IsCoOp", "IsCustomMusic")
                        .IsUnique()
                        .HasName("IX_Leaderboards");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("toofz.Data.Mode", b =>
                {
                    b.Property<int>("ModeId");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("ModeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("toofz.Data.Player", b =>
                {
                    b.Property<long>("SteamId");

                    b.Property<string>("Avatar");

                    b.Property<bool?>("Exists");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("SteamId");

                    b.HasIndex("Name");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("toofz.Data.Product", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("toofz.Data.Replay", b =>
                {
                    b.Property<long>("ReplayId");

                    b.Property<int?>("ErrorCode");

                    b.Property<string>("KilledBy");

                    b.Property<int?>("Seed");

                    b.Property<string>("Uri");

                    b.Property<int?>("Version");

                    b.HasKey("ReplayId");

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("toofz.Data.Run", b =>
                {
                    b.Property<int>("RunId");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("RunId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("toofz.Data.DailyEntry", b =>
                {
                    b.HasOne("toofz.Data.DailyLeaderboard", "Leaderboard")
                        .WithMany("Entries")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toofz.Data.Replay", "Replay")
                        .WithMany()
                        .HasForeignKey("ReplayId");

                    b.HasOne("toofz.Data.Player", "Player")
                        .WithMany("DailyEntries")
                        .HasForeignKey("SteamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toofz.Data.DailyLeaderboard", b =>
                {
                    b.HasOne("toofz.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toofz.Data.Entry", b =>
                {
                    b.HasOne("toofz.Data.Leaderboard", "Leaderboard")
                        .WithMany("Entries")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toofz.Data.Replay", "Replay")
                        .WithMany()
                        .HasForeignKey("ReplayId");

                    b.HasOne("toofz.Data.Player", "Player")
                        .WithMany("Entries")
                        .HasForeignKey("SteamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("toofz.Data.Leaderboard", b =>
                {
                    b.HasOne("toofz.Data.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toofz.Data.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toofz.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("toofz.Data.Run", "Run")
                        .WithMany()
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
