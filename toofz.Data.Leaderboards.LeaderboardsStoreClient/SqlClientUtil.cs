using System;
using System.Data.SqlClient;
using System.Reflection;

namespace toofz.Data
{
    public static class SqlClientUtil
    {
        #region http://blog.gauffin.org/2014/08/how-to-create-a-sqlexception/

        #region SqlError

        /// <summary>
        /// Initializes an instance of the <see cref="SqlError"/> class.
        /// </summary>
        /// <param name="infoNumber">The number that identifies the type of error.</param>
        /// <returns>
        /// An instance of the <see cref="SqlError"/> class.
        /// </returns>
        /// <remarks>
        /// This uses reflection to call a non-public constructor.
        /// </remarks>
        public static SqlError CreateSqlError(int infoNumber)
        {
            return CreateSqlError(infoNumber, default, default, default, default, default, default, default);
        }

        /// <summary>
        /// Initializes an instance of the <see cref="SqlClientUtil"/> class.
        /// </summary>
        /// <param name="infoNumber">The number that identifies the type of error.</param>
        /// <param name="errorState">The state code.</param>
        /// <param name="errorClass">The severity level of the error returned from SQL Server.</param>
        /// <param name="server">The name of the instance of SQL Server.</param>
        /// <param name="errorMessage">
        /// The text describing the error.
        /// For more information on errors generated by SQL Server, see SQL Server Books Online.
        /// </param>
        /// <param name="procedure">
        /// The name of the stored procedure or RPC.
        /// For more information on errors generated by SQL Server, see SQL Server Books Online.
        /// </param>
        /// <param name="lineNumber">
        /// The line number within the Transact-SQL command batch or stored procedure that contains the error.
        /// </param>
        /// <param name="win32ErrorCode"></param>
        /// <returns>
        /// An instance of the <see cref="SqlError"/> class.
        /// </returns>
        /// <remarks>
        /// This uses reflection to call a non-public constructor.
        /// </remarks>
        public static SqlError CreateSqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, uint win32ErrorCode)
        {
            var sqlErrorCtor = GetConstructor<SqlError>(
                typeof(int),    // infoNumber
                typeof(byte),   // errorState
                typeof(byte),   // errorClass
                typeof(string), // server
                typeof(string), // errorMessage
                typeof(string), // procedure
                typeof(int),    // lineNumber
                typeof(uint));  // win32ErrorCode

            return (SqlError)sqlErrorCtor.Invoke(new object[] { infoNumber, errorState, errorClass, server, errorMessage, procedure, lineNumber, win32ErrorCode });
        }

        #endregion

        #region SqlErrorCollection

        /// <summary>
        /// Initializes an instance of the <see cref="SqlErrorCollection"/> class.
        /// </summary>
        /// <param name="errors">Errors to add to the collection.</param>
        /// <returns>
        /// An instance of the <see cref="SqlErrorCollection"/> class.
        /// </returns>
        /// <remarks>
        /// This uses reflection to call a non-public constructor.
        /// </remarks>
        public static SqlErrorCollection CreateSqlErrorCollection(params SqlError[] errors)
        {
            var sqlErrorCollectionCtor = GetConstructor<SqlErrorCollection>();

            var errorCollection = (SqlErrorCollection)sqlErrorCollectionCtor.Invoke(null);
            foreach (var error in errors)
            {
                errorCollection.Add(error);
            }

            return errorCollection;
        }

        /// <summary>
        /// Adds <paramref name="error"/> to <paramref name="errorCollection"/>.
        /// </summary>
        /// <param name="errorCollection">The <see cref="SqlErrorCollection"/>.</param>
        /// <param name="error">The <see cref="SqlError"/> to add.</param>
        /// <remarks>
        /// This uses reflection to call a non-public method.
        /// </remarks>
        public static void Add(this SqlErrorCollection errorCollection, SqlError error)
        {
            var sqlErrorCollectionAdd = typeof(SqlErrorCollection).GetMethod("Add", NonPublicInstanceMember);

            sqlErrorCollectionAdd.Invoke(errorCollection, new[] { error });
        }

        #endregion

        #region SqlException

        /// <summary>
        /// Initializes an instance of the <see cref="SqlException"/> class.
        /// </summary>
        /// <param name="errors">Errors to add to the collection.</param>
        /// <returns>
        /// An instance of the <see cref="SqlException"/> class.
        /// </returns>
        /// <remarks>
        /// This uses reflection to call a non-public constructor.
        /// </remarks>
        public static SqlException CreateSqlException(params SqlError[] errors)
        {
            return CreateSqlException(default, default, default, errors);
        }

        /// <summary>
        /// Initializes an instance of the <see cref="SqlClientUtil"/> class.
        /// </summary>
        /// <returns>
        /// An instance of the <see cref="SqlClientUtil"/> class.
        /// </returns>
        /// <remarks>
        /// This uses reflection to call a non-public constructor.
        /// </remarks>
        public static SqlException CreateSqlException(string message, Exception innerException, Guid conId, params SqlError[] errors)
        {
            var errorCollection = CreateSqlErrorCollection(errors);

            return CreateSqlException(message, errorCollection, innerException, conId);
        }

        /// <summary>
        /// Initializes an instance of the <see cref="SqlClientUtil"/> class.
        /// </summary>
        /// <returns>
        /// An instance of the <see cref="SqlClientUtil"/> class.
        /// </returns>
        /// <remarks>
        /// This uses reflection to call a non-public constructor.
        /// </remarks>
        public static SqlException CreateSqlException(string message, SqlErrorCollection errorCollection, Exception innerException, Guid conId)
        {
            var sqlExceptionCtor = GetConstructor<SqlException>(
                typeof(string),             // message
                typeof(SqlErrorCollection), // errorCollection
                typeof(Exception),          // innerException
                typeof(Guid));              // conId

            return (SqlException)sqlExceptionCtor.Invoke(new object[] { message, errorCollection, innerException, conId });
        }

        #endregion

        #region Helper Methods

        private const BindingFlags NonPublicInstanceMember = BindingFlags.NonPublic | BindingFlags.Instance;

        private static ConstructorInfo GetConstructor<T>(params Type[] types)
        {
            return typeof(T).GetConstructor(
                bindingAttr: NonPublicInstanceMember,
                binder: null,
                types: types,
                modifiers: null);
        }

        #endregion

        #endregion
    }
}
