//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheType(
    typeof(toofz.Data.LeaderboardsContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets64034a1e3fd775edaab3bf45f4cf107938e52a3b68cdf9c2127dd7cf2a5f3bce))]

namespace Edm_EntityMappingGeneratedViews
{
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    internal sealed class ViewsForBaseEntitySets64034a1e3fd775edaab3bf45f4cf107938e52a3b68cdf9c2127dd7cf2a5f3bce : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue => "64034a1e3fd775edaab3bf45f4cf107938e52a3b68cdf9c2127dd7cf2a5f3bce";

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">An <see cref="EntitySetBase"/> that specifies the extent.</param>
        /// <returns>
        /// A <see cref="DbMappingView"/> that specifies the mapping view, or 
        /// null if the extent is not associated with a mapping view.
        /// </returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            switch (extent.EntityContainer.Name)
            {
                case "CodeFirstDatabase":
                    switch (extent.Name)
                    {
                        case "Character":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Character
        [CodeFirstDatabaseSchema.Character](T1.Character_CharacterId, T1.Character_Name, T1.Character_DisplayName)
    FROM (
        SELECT 
            T.CharacterId AS Character_CharacterId, 
            T.Name AS Character_Name, 
            T.DisplayName AS Character_DisplayName, 
            True AS _from0
        FROM LeaderboardsContext.Characters AS T
    ) AS T1");

                        case "DailyEntry":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing DailyEntry
        [CodeFirstDatabaseSchema.DailyEntry](T1.DailyEntry_LeaderboardId, T1.DailyEntry_Rank, T1.DailyEntry_SteamId, T1.DailyEntry_ReplayId, T1.DailyEntry_Score, T1.DailyEntry_Zone, T1.DailyEntry_Level)
    FROM (
        SELECT 
            T.LeaderboardId AS DailyEntry_LeaderboardId, 
            T.Rank AS DailyEntry_Rank, 
            T.SteamId AS DailyEntry_SteamId, 
            T.ReplayId AS DailyEntry_ReplayId, 
            T.Score AS DailyEntry_Score, 
            T.Zone AS DailyEntry_Zone, 
            T.Level AS DailyEntry_Level, 
            True AS _from0
        FROM LeaderboardsContext.DailyEntries AS T
    ) AS T1");

                        case "DailyLeaderboard":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing DailyLeaderboard
        [CodeFirstDatabaseSchema.DailyLeaderboard](T1.DailyLeaderboard_LeaderboardId, T1.DailyLeaderboard_LastUpdate, T1.DailyLeaderboard_Name, T1.DailyLeaderboard_DisplayName, T1.DailyLeaderboard_IsProduction, T1.DailyLeaderboard_ProductId, T1.DailyLeaderboard_Date)
    FROM (
        SELECT 
            T.LeaderboardId AS DailyLeaderboard_LeaderboardId, 
            T.LastUpdate AS DailyLeaderboard_LastUpdate, 
            T.Name AS DailyLeaderboard_Name, 
            T.DisplayName AS DailyLeaderboard_DisplayName, 
            T.IsProduction AS DailyLeaderboard_IsProduction, 
            T.ProductId AS DailyLeaderboard_ProductId, 
            T.Date AS DailyLeaderboard_Date, 
            True AS _from0
        FROM LeaderboardsContext.DailyLeaderboards AS T
    ) AS T1");

                        case "Product":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Product
        [CodeFirstDatabaseSchema.Product](T1.Product_ProductId, T1.Product_Name, T1.Product_DisplayName)
    FROM (
        SELECT 
            T.ProductId AS Product_ProductId, 
            T.Name AS Product_Name, 
            T.DisplayName AS Product_DisplayName, 
            True AS _from0
        FROM LeaderboardsContext.Products AS T
    ) AS T1");

                        case "Player":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Player
        [CodeFirstDatabaseSchema.Player](T1.Player_SteamId, T1.Player_LastUpdate, T1.Player_Exists, T1.Player_Name, T1.Player_Avatar)
    FROM (
        SELECT 
            T.SteamId AS Player_SteamId, 
            T.LastUpdate AS Player_LastUpdate, 
            T.[Exists] AS Player_Exists, 
            T.Name AS Player_Name, 
            T.Avatar AS Player_Avatar, 
            True AS _from0
        FROM LeaderboardsContext.Players AS T
    ) AS T1");

                        case "Entry":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Entry
        [CodeFirstDatabaseSchema.Entry](T1.Entry_LeaderboardId, T1.Entry_Rank, T1.Entry_SteamId, T1.Entry_ReplayId, T1.Entry_Score, T1.Entry_Zone, T1.Entry_Level)
    FROM (
        SELECT 
            T.LeaderboardId AS Entry_LeaderboardId, 
            T.Rank AS Entry_Rank, 
            T.SteamId AS Entry_SteamId, 
            T.ReplayId AS Entry_ReplayId, 
            T.Score AS Entry_Score, 
            T.Zone AS Entry_Zone, 
            T.Level AS Entry_Level, 
            True AS _from0
        FROM LeaderboardsContext.Entries AS T
    ) AS T1");

                        case "Leaderboard":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Leaderboard
        [CodeFirstDatabaseSchema.Leaderboard](T1.Leaderboard_LeaderboardId, T1.Leaderboard_LastUpdate, T1.Leaderboard_Name, T1.Leaderboard_DisplayName, T1.Leaderboard_IsProduction, T1.Leaderboard_ProductId, T1.Leaderboard_ModeId, T1.Leaderboard_RunId, T1.Leaderboard_CharacterId, T1.Leaderboard_IsCoOp, T1.Leaderboard_IsCustomMusic)
    FROM (
        SELECT 
            T.LeaderboardId AS Leaderboard_LeaderboardId, 
            T.LastUpdate AS Leaderboard_LastUpdate, 
            T.Name AS Leaderboard_Name, 
            T.DisplayName AS Leaderboard_DisplayName, 
            T.IsProduction AS Leaderboard_IsProduction, 
            T.ProductId AS Leaderboard_ProductId, 
            T.ModeId AS Leaderboard_ModeId, 
            T.RunId AS Leaderboard_RunId, 
            T.CharacterId AS Leaderboard_CharacterId, 
            T.IsCoOp AS Leaderboard_IsCoOp, 
            T.IsCustomMusic AS Leaderboard_IsCustomMusic, 
            True AS _from0
        FROM LeaderboardsContext.Leaderboards AS T
    ) AS T1");

                        case "Mode":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Mode
        [CodeFirstDatabaseSchema.Mode](T1.Mode_ModeId, T1.Mode_Name, T1.Mode_DisplayName)
    FROM (
        SELECT 
            T.ModeId AS Mode_ModeId, 
            T.Name AS Mode_Name, 
            T.DisplayName AS Mode_DisplayName, 
            True AS _from0
        FROM LeaderboardsContext.Modes AS T
    ) AS T1");

                        case "Run":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Run
        [CodeFirstDatabaseSchema.Run](T1.Run_RunId, T1.Run_Name, T1.Run_DisplayName)
    FROM (
        SELECT 
            T.RunId AS Run_RunId, 
            T.Name AS Run_Name, 
            T.DisplayName AS Run_DisplayName, 
            True AS _from0
        FROM LeaderboardsContext.Runs AS T
    ) AS T1");

                        case "Replay":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Replay
        [CodeFirstDatabaseSchema.Replay](T1.Replay_ReplayId, T1.Replay_ErrorCode, T1.Replay_Seed, T1.Replay_Version, T1.Replay_KilledBy, T1.Replay_Uri)
    FROM (
        SELECT 
            T.ReplayId AS Replay_ReplayId, 
            T.ErrorCode AS Replay_ErrorCode, 
            T.Seed AS Replay_Seed, 
            T.Version AS Replay_Version, 
            T.KilledBy AS Replay_KilledBy, 
            T.Uri AS Replay_Uri, 
            True AS _from0
        FROM LeaderboardsContext.Replays AS T
    ) AS T1");
                    }
                    break;

                case "LeaderboardsContext":
                    switch (extent.Name)
                    {
                        case "Characters":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Characters
        [toofz.Data.Character](T1.Character_CharacterId, T1.Character_Name, T1.Character_DisplayName)
    FROM (
        SELECT 
            T.CharacterId AS Character_CharacterId, 
            T.Name AS Character_Name, 
            T.DisplayName AS Character_DisplayName, 
            True AS _from0
        FROM CodeFirstDatabase.Character AS T
    ) AS T1");

                        case "DailyEntries":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing DailyEntries
        [toofz.Data.DailyEntry](T1.DailyEntry_LeaderboardId, T1.DailyEntry_Rank, T1.DailyEntry_SteamId, T1.DailyEntry_ReplayId, T1.DailyEntry_Score, T1.DailyEntry_Zone, T1.DailyEntry_Level)
    FROM (
        SELECT 
            T.LeaderboardId AS DailyEntry_LeaderboardId, 
            T.Rank AS DailyEntry_Rank, 
            T.SteamId AS DailyEntry_SteamId, 
            T.ReplayId AS DailyEntry_ReplayId, 
            T.Score AS DailyEntry_Score, 
            T.Zone AS DailyEntry_Zone, 
            T.Level AS DailyEntry_Level, 
            True AS _from0
        FROM CodeFirstDatabase.DailyEntry AS T
    ) AS T1");

                        case "DailyLeaderboards":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing DailyLeaderboards
        [toofz.Data.DailyLeaderboard](T1.DailyLeaderboard_LeaderboardId, T1.DailyLeaderboard_LastUpdate, T1.DailyLeaderboard_Name, T1.DailyLeaderboard_DisplayName, T1.DailyLeaderboard_IsProduction, T1.DailyLeaderboard_ProductId, T1.DailyLeaderboard_Date)
    FROM (
        SELECT 
            T.LeaderboardId AS DailyLeaderboard_LeaderboardId, 
            T.LastUpdate AS DailyLeaderboard_LastUpdate, 
            T.Name AS DailyLeaderboard_Name, 
            T.DisplayName AS DailyLeaderboard_DisplayName, 
            T.IsProduction AS DailyLeaderboard_IsProduction, 
            T.ProductId AS DailyLeaderboard_ProductId, 
            T.Date AS DailyLeaderboard_Date, 
            True AS _from0
        FROM CodeFirstDatabase.DailyLeaderboard AS T
    ) AS T1");

                        case "Products":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [toofz.Data.Product](T1.Product_ProductId, T1.Product_Name, T1.Product_DisplayName)
    FROM (
        SELECT 
            T.ProductId AS Product_ProductId, 
            T.Name AS Product_Name, 
            T.DisplayName AS Product_DisplayName, 
            True AS _from0
        FROM CodeFirstDatabase.Product AS T
    ) AS T1");

                        case "Players":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Players
        [toofz.Data.Player](T1.Player_SteamId, T1.Player_LastUpdate, T1.Player_Exists, T1.Player_Name, T1.Player_Avatar)
    FROM (
        SELECT 
            T.SteamId AS Player_SteamId, 
            T.LastUpdate AS Player_LastUpdate, 
            T.[Exists] AS Player_Exists, 
            T.Name AS Player_Name, 
            T.Avatar AS Player_Avatar, 
            True AS _from0
        FROM CodeFirstDatabase.Player AS T
    ) AS T1");

                        case "Entries":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Entries
        [toofz.Data.Entry](T1.Entry_LeaderboardId, T1.Entry_Rank, T1.Entry_SteamId, T1.Entry_ReplayId, T1.Entry_Score, T1.Entry_Zone, T1.Entry_Level)
    FROM (
        SELECT 
            T.LeaderboardId AS Entry_LeaderboardId, 
            T.Rank AS Entry_Rank, 
            T.SteamId AS Entry_SteamId, 
            T.ReplayId AS Entry_ReplayId, 
            T.Score AS Entry_Score, 
            T.Zone AS Entry_Zone, 
            T.Level AS Entry_Level, 
            True AS _from0
        FROM CodeFirstDatabase.Entry AS T
    ) AS T1");

                        case "Leaderboards":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Leaderboards
        [toofz.Data.Leaderboard](T1.Leaderboard_LeaderboardId, T1.Leaderboard_LastUpdate, T1.Leaderboard_Name, T1.Leaderboard_DisplayName, T1.Leaderboard_IsProduction, T1.Leaderboard_ProductId, T1.Leaderboard_ModeId, T1.Leaderboard_RunId, T1.Leaderboard_CharacterId, T1.Leaderboard_IsCoOp, T1.Leaderboard_IsCustomMusic)
    FROM (
        SELECT 
            T.LeaderboardId AS Leaderboard_LeaderboardId, 
            T.LastUpdate AS Leaderboard_LastUpdate, 
            T.Name AS Leaderboard_Name, 
            T.DisplayName AS Leaderboard_DisplayName, 
            T.IsProduction AS Leaderboard_IsProduction, 
            T.ProductId AS Leaderboard_ProductId, 
            T.ModeId AS Leaderboard_ModeId, 
            T.RunId AS Leaderboard_RunId, 
            T.CharacterId AS Leaderboard_CharacterId, 
            T.IsCoOp AS Leaderboard_IsCoOp, 
            T.IsCustomMusic AS Leaderboard_IsCustomMusic, 
            True AS _from0
        FROM CodeFirstDatabase.Leaderboard AS T
    ) AS T1");

                        case "Modes":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Modes
        [toofz.Data.Mode](T1.Mode_ModeId, T1.Mode_Name, T1.Mode_DisplayName)
    FROM (
        SELECT 
            T.ModeId AS Mode_ModeId, 
            T.Name AS Mode_Name, 
            T.DisplayName AS Mode_DisplayName, 
            True AS _from0
        FROM CodeFirstDatabase.Mode AS T
    ) AS T1");

                        case "Runs":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Runs
        [toofz.Data.Run](T1.Run_RunId, T1.Run_Name, T1.Run_DisplayName)
    FROM (
        SELECT 
            T.RunId AS Run_RunId, 
            T.Name AS Run_Name, 
            T.DisplayName AS Run_DisplayName, 
            True AS _from0
        FROM CodeFirstDatabase.Run AS T
    ) AS T1");

                        case "Replays":
                            return new DbMappingView(@"
    SELECT VALUE -- Constructing Replays
        [toofz.Data.Replay](T1.Replay_ReplayId, T1.Replay_ErrorCode, T1.Replay_Seed, T1.Replay_Version, T1.Replay_KilledBy, T1.Replay_Uri)
    FROM (
        SELECT 
            T.ReplayId AS Replay_ReplayId, 
            T.ErrorCode AS Replay_ErrorCode, 
            T.Seed AS Replay_Seed, 
            T.Version AS Replay_Version, 
            T.KilledBy AS Replay_KilledBy, 
            T.Uri AS Replay_Uri, 
            True AS _from0
        FROM CodeFirstDatabase.Replay AS T
    ) AS T1");
                    }
                    break;
            }

            return null;
        }
    }
}